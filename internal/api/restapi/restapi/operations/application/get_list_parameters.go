// Code generated by go-swagger; DO NOT EDIT.

package application

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetListParams creates a new GetListParams object
//
// There are no default values defined in the spec.
func NewGetListParams() GetListParams {

	return GetListParams{}
}

// GetListParams contains all the bound params for the get list operation
// typically these are obtained from a http.Request
//
// swagger:parameters getList
type GetListParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: query
	*/
	MNN string
	/*
	  Required: true
	  In: query
	*/
	DivisionOID string
	/*
	  Required: true
	  In: query
	*/
	Year int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetListParams() beforehand.
func (o *GetListParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qMNN, qhkMNN, _ := qs.GetOK("MNN")
	if err := o.bindMNN(qMNN, qhkMNN, route.Formats); err != nil {
		res = append(res, err)
	}

	qDivisionOID, qhkDivisionOID, _ := qs.GetOK("divisionOID")
	if err := o.bindDivisionOID(qDivisionOID, qhkDivisionOID, route.Formats); err != nil {
		res = append(res, err)
	}

	qYear, qhkYear, _ := qs.GetOK("year")
	if err := o.bindYear(qYear, qhkYear, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindMNN binds and validates parameter MNN from query.
func (o *GetListParams) bindMNN(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("MNN", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("MNN", "query", raw); err != nil {
		return err
	}
	o.MNN = raw

	return nil
}

// bindDivisionOID binds and validates parameter DivisionOID from query.
func (o *GetListParams) bindDivisionOID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("divisionOID", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("divisionOID", "query", raw); err != nil {
		return err
	}
	o.DivisionOID = raw

	return nil
}

// bindYear binds and validates parameter Year from query.
func (o *GetListParams) bindYear(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("year", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("year", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("year", "query", "int64", raw)
	}
	o.Year = value

	return nil
}
